/*
Deployment script for EcoTravelDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "EcoTravelDB"
:setvar DefaultFilePrefix "EcoTravelDB"
:setvar DefaultDataPath "C:\Users\c.kempinaire\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\c.kempinaire\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Annulation]...';


GO
CREATE TABLE [dbo].[Annulation] (
    [IdClient]       INT  NOT NULL,
    [idReservation]  INT  NOT NULL,
    [dateAnnulation] DATE NOT NULL
);


GO
PRINT N'Creating Table [dbo].[Avis]...';


GO
CREATE TABLE [dbo].[Avis] (
    [IdAvis]        INT            IDENTITY (1, 1) NOT NULL,
    [idLogement]    INT            NOT NULL,
    [idReservation] INT            NOT NULL,
    [note]          INT            NULL,
    [description]   NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_Avis] PRIMARY KEY CLUSTERED ([IdAvis] ASC)
);


GO
PRINT N'Creating Table [dbo].[Client]...';


GO
CREATE TABLE [dbo].[Client] (
    [IdClient]  INT            IDENTITY (1, 1) NOT NULL,
    [nom]       NVARCHAR (50)  NOT NULL,
    [prenom]    NVARCHAR (50)  NOT NULL,
    [email]     NVARCHAR (255) NOT NULL,
    [pays]      NVARCHAR (50)  NOT NULL,
    [telephone] NVARCHAR (50)  NOT NULL,
    [password]  VARBINARY (64) NOT NULL,
    CONSTRAINT [PK_Client] PRIMARY KEY CLUSTERED ([IdClient] ASC),
    UNIQUE NONCLUSTERED ([nom] ASC),
    CONSTRAINT [UK_Client_email] UNIQUE NONCLUSTERED ([email] ASC)
);


GO
PRINT N'Creating Table [dbo].[Indisponibilite]...';


GO
CREATE TABLE [dbo].[Indisponibilite] (
    [IdIndisponibilite] INT  IDENTITY (1, 1) NOT NULL,
    [dateDebut]         DATE NOT NULL,
    [dateFin]           DATE NOT NULL,
    [idClient]          INT  NOT NULL,
    [idLogement]        INT  NOT NULL,
    CONSTRAINT [PK_Indisponibilite] PRIMARY KEY CLUSTERED ([IdIndisponibilite] ASC)
);


GO
PRINT N'Creating Table [dbo].[Logement]...';


GO
CREATE TABLE [dbo].[Logement] (
    [IdLogement]        INT             IDENTITY (1, 1) NOT NULL,
    [nom]               NVARCHAR (50)   NOT NULL,
    [rue]               NVARCHAR (255)  NOT NULL,
    [numero]            NVARCHAR (50)   NOT NULL,
    [codePostal]        NVARCHAR (50)   NOT NULL,
    [pays]              NVARCHAR (50)   NOT NULL,
    [latitude]          DECIMAL (10, 7) NOT NULL,
    [longitude]         DECIMAL (10, 7) NOT NULL,
    [descriptionCourte] NVARCHAR (255)  NOT NULL,
    [descriptionLongue] VARCHAR (MAX)   NOT NULL,
    [nbChambre]         TINYINT         NOT NULL,
    [nbPiece]           TINYINT         NOT NULL,
    [PrixNuit]          MONEY           NOT NULL,
    [capacite]          TINYINT         NOT NULL,
    [salleDeBain]       TINYINT         NOT NULL,
    [WC]                TINYINT         NOT NULL,
    [Balcon]            BIT             NOT NULL,
    [AirCo]             BIT             NOT NULL,
    [wifi]              BIT             NOT NULL,
    [miniBar]           BIT             NOT NULL,
    [animauxAdmis]      BIT             NOT NULL,
    [piscine]           BIT             NOT NULL,
    [voiturier]         BIT             NOT NULL,
    [roomservice]       BIT             NOT NULL,
    [idType]            INT             NOT NULL,
    [idClient]          INT             NOT NULL,
    [dateCreation]      DATE            NOT NULL,
    CONSTRAINT [PK_Logement] PRIMARY KEY CLUSTERED ([IdLogement] ASC)
);


GO
PRINT N'Creating Table [dbo].[photos]...';


GO
CREATE TABLE [dbo].[photos] (
    [IdPhoto]    INT            NOT NULL,
    [idLogement] INT            NOT NULL,
    [photo]      NVARCHAR (255) NOT NULL,
    CONSTRAINT [PK_photos] PRIMARY KEY CLUSTERED ([IdPhoto] ASC),
    UNIQUE NONCLUSTERED ([photo] ASC)
);


GO
PRINT N'Creating Table [dbo].[Proprietaire]...';


GO
CREATE TABLE [dbo].[Proprietaire] (
    [idClient] INT IDENTITY (1, 1) NOT NULL
);


GO
PRINT N'Creating Table [dbo].[Reservation]...';


GO
CREATE TABLE [dbo].[Reservation] (
    [IdReservation] INT  IDENTITY (1, 1) NOT NULL,
    [dateDebut]     DATE NOT NULL,
    [dateFin]       DATE NOT NULL,
    [nbAdulte]      INT  NOT NULL,
    [nbEnfant]      INT  NOT NULL,
    [PrixTotal]     INT  NOT NULL,
    [Assurance]     BIT  NOT NULL,
    [annulerPar]    BIT  NOT NULL,
    [idLogement]    INT  NOT NULL,
    [idClient]      INT  NOT NULL,
    CONSTRAINT [PK_Reservation] PRIMARY KEY CLUSTERED ([IdReservation] ASC)
);


GO
PRINT N'Creating Table [dbo].[Type]...';


GO
CREATE TABLE [dbo].[Type] (
    [IdType] INT           IDENTITY (1, 1) NOT NULL,
    [type]   NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_Type] PRIMARY KEY CLUSTERED ([IdType] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Logement]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD DEFAULT 1 FOR [WC];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Logement]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD DEFAULT 0 FOR [Balcon];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Logement]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD DEFAULT 0 FOR [AirCo];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Logement]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD DEFAULT 1 FOR [wifi];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Logement]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD DEFAULT 0 FOR [miniBar];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Logement]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD DEFAULT 1 FOR [animauxAdmis];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Logement]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD DEFAULT 0 FOR [piscine];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Logement]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD DEFAULT 0 FOR [voiturier];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Logement]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD DEFAULT 0 FOR [roomservice];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Logement]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD DEFAULT GETDATE() FOR [dateCreation];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Reservation]...';


GO
ALTER TABLE [dbo].[Reservation]
    ADD DEFAULT 0 FOR [nbEnfant];


GO
PRINT N'Creating Foreign Key [dbo].[FK_Client]...';


GO
ALTER TABLE [dbo].[Annulation]
    ADD CONSTRAINT [FK_Client] FOREIGN KEY ([IdClient]) REFERENCES [dbo].[Client] ([IdClient]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Reservation]...';


GO
ALTER TABLE [dbo].[Annulation]
    ADD CONSTRAINT [FK_Reservation] FOREIGN KEY ([idReservation]) REFERENCES [dbo].[Reservation] ([IdReservation]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Avis_Logement]...';


GO
ALTER TABLE [dbo].[Avis]
    ADD CONSTRAINT [FK_Avis_Logement] FOREIGN KEY ([idLogement]) REFERENCES [dbo].[Logement] ([IdLogement]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Avis_Reservation]...';


GO
ALTER TABLE [dbo].[Avis]
    ADD CONSTRAINT [FK_Avis_Reservation] FOREIGN KEY ([idReservation]) REFERENCES [dbo].[Reservation] ([IdReservation]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Indisponibilite_Logement]...';


GO
ALTER TABLE [dbo].[Indisponibilite]
    ADD CONSTRAINT [FK_Indisponibilite_Logement] FOREIGN KEY ([idLogement]) REFERENCES [dbo].[Logement] ([IdLogement]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Indisponibilite_Client]...';


GO
ALTER TABLE [dbo].[Indisponibilite]
    ADD CONSTRAINT [FK_Indisponibilite_Client] FOREIGN KEY ([idClient]) REFERENCES [dbo].[Client] ([IdClient]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LogementType]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD CONSTRAINT [FK_LogementType] FOREIGN KEY ([idType]) REFERENCES [dbo].[Type] ([IdType]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Logement_Client]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD CONSTRAINT [FK_Logement_Client] FOREIGN KEY ([idClient]) REFERENCES [dbo].[Client] ([IdClient]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_photos_ToTable]...';


GO
ALTER TABLE [dbo].[photos]
    ADD CONSTRAINT [FK_photos_ToTable] FOREIGN KEY ([idLogement]) REFERENCES [dbo].[Logement] ([IdLogement]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ProprietaireClient]...';


GO
ALTER TABLE [dbo].[Proprietaire]
    ADD CONSTRAINT [FK_ProprietaireClient] FOREIGN KEY ([idClient]) REFERENCES [dbo].[Client] ([IdClient]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Reservation_Logement]...';


GO
ALTER TABLE [dbo].[Reservation]
    ADD CONSTRAINT [FK_Reservation_Logement] FOREIGN KEY ([idLogement]) REFERENCES [dbo].[Logement] ([IdLogement]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Reservation_Client]...';


GO
ALTER TABLE [dbo].[Reservation]
    ADD CONSTRAINT [FK_Reservation_Client] FOREIGN KEY ([idClient]) REFERENCES [dbo].[Client] ([IdClient]);


GO
PRINT N'Creating Check Constraint [dbo].[CK_Avis_note]...';


GO
ALTER TABLE [dbo].[Avis]
    ADD CONSTRAINT [CK_Avis_note] CHECK ([note]<=5);


GO
PRINT N'Creating Check Constraint [dbo].[CK_Client_email]...';


GO
ALTER TABLE [dbo].[Client]
    ADD CONSTRAINT [CK_Client_email] CHECK ([email] LIKE ('%__@__%.__%'));


GO
PRINT N'Creating Check Constraint [dbo].[CK_Client_telephone]...';


GO
ALTER TABLE [dbo].[Client]
    ADD CONSTRAINT [CK_Client_telephone] CHECK (ISNUMERIC(REPLACE(REPLACE(REPLACE([telephone], '+', '00'), '/', ''), '.', '')) = 1);


GO
PRINT N'Creating Check Constraint [dbo].[CK_Client_nom]...';


GO
ALTER TABLE [dbo].[Client]
    ADD CONSTRAINT [CK_Client_nom] CHECK (LEN([nom]) >= 1);


GO
PRINT N'Creating Check Constraint [dbo].[CK_Client_prenom]...';


GO
ALTER TABLE [dbo].[Client]
    ADD CONSTRAINT [CK_Client_prenom] CHECK (LEN([prenom]) >= 1);


GO
PRINT N'Creating Check Constraint [dbo].[CK_Reservation_dateDebutDispo]...';


GO
ALTER TABLE [dbo].[Indisponibilite]
    ADD CONSTRAINT [CK_Reservation_dateDebutDispo] CHECK ([dateDebut] >= GETDATE());


GO
PRINT N'Creating Check Constraint [dbo].[CK_Reservation_dateFinDispo]...';


GO
ALTER TABLE [dbo].[Indisponibilite]
    ADD CONSTRAINT [CK_Reservation_dateFinDispo] CHECK ([dateFin] > [dateDebut]);


GO
PRINT N'Creating Check Constraint [dbo].[CK_Logement_prixNuit]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD CONSTRAINT [CK_Logement_prixNuit] CHECK ([prixNuit] >= 0);


GO
PRINT N'Creating Check Constraint [dbo].[CK_Logement_nbChambre]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD CONSTRAINT [CK_Logement_nbChambre] CHECK ([nbChambre] >= 1);


GO
PRINT N'Creating Check Constraint [dbo].[CK_Logement_nbPiece]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD CONSTRAINT [CK_Logement_nbPiece] CHECK ([nbPiece] >= 1);


GO
PRINT N'Creating Check Constraint [dbo].[CK_Logement_capacite]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD CONSTRAINT [CK_Logement_capacite] CHECK ([capacite] >= 1);


GO
PRINT N'Creating Check Constraint [dbo].[CK_Logement_Description]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD CONSTRAINT [CK_Logement_Description] CHECK (LEN([descriptionCourte]) < LEN([descriptionLongue]));


GO
PRINT N'Creating Check Constraint [dbo].[CK_Photo_photo]...';


GO
ALTER TABLE [dbo].[photos]
    ADD CONSTRAINT [CK_Photo_photo] CHECK (LEN([photo]) >= 5 AND ([photo] LIKE '%_.png' OR [photo] LIKE '%_.jpg'));


GO
PRINT N'Creating Check Constraint [dbo].[CK_Reservation_DateDebut]...';


GO
ALTER TABLE [dbo].[Reservation]
    ADD CONSTRAINT [CK_Reservation_DateDebut] CHECK ([dateDebut]>=(GETDATE()));


GO
PRINT N'Creating View [dbo].[BestLogement]...';


GO
CREATE VIEW [dbo].[BestLogement] 

AS SELECT DISTINCT L.*
FROM [Logement] AS L
JOIN [Avis] AS A 
ON L.[idLogement] = A.[idLogement]
WHERE (SELECT AVG([note]) FROM Avis WHERE Avis.idLogement = L.IdLogement)>(SELECT AVG([note]) FROM [Avis]);
GO
PRINT N'Creating View [dbo].[ReservationPays]...';


GO
CREATE VIEW [dbo].[ReservationPays]
	AS SELECT [idReservation],
			  [dateDebut],
			  [dateFin],
			  L.[pays]
	FROM [Reservation] AS R
	JOIN [Logement] as L
	ON R.[idLogement] = L.[idLogement]
GO
PRINT N'Creating Procedure [dbo].[SP_ClientAdd]...';


GO
CREATE PROCEDURE [dbo].[SP_ClientAdd]
	@nom NVARCHAR(50),
	@prenom NVARCHAR(50),
	@email NVARCHAR(255),
	@pays NVARCHAR(50),
	@telephone NVARCHAR(50),
	@password NVARCHAR(32)

AS
	INSERT INTO [Client] ([nom],[prenom],[email], [pays], [telephone], [password])
	OUTPUT [inserted].[idClient]
	VALUES (@nom, @prenom, @email, @pays, @telephone, HASHBYTES('SHA2_512',@password))
GO
PRINT N'Creating Procedure [dbo].[SP_ClientCheck]...';


GO
CREATE PROCEDURE [dbo].[SP_ClientCheck]
	@email NVARCHAR(255),
	@pass NVARCHAR(32)
AS
	SELECT [idClient]
	FROM [Client] 
	WHERE	[email] = @email 
		AND [password] = HASHBYTES('SHA2_512',@pass)
GO
PRINT N'Creating Procedure [dbo].[SP_Logement_Month]...';


GO
CREATE PROCEDURE [dbo].[SP_Logement_Month] AS
    SELECT * FROM [Logement]
    WHERE [DateCreation] BETWEEN CONVERT(DATETIME,DATEDIFF(DAY,30,GETDATE())) AND GETDATE()
GO
PRINT N'Creating Procedure [dbo].[SP_Reservations_Now]...';


GO
CREATE PROCEDURE [dbo].[SP_Reservations_Now]
    @id_client INT
AS
BEGIN
    SELECT L.*, R.[dateDebut], R.[dateFin]
    FROM [Logement] AS L
    JOIN [Reservation] AS R
    ON R.[idLogement] = L.[idLogement]
    JOIN [Annulation] AS A
    ON A.[idReservation] = R.[IdReservation]
    WHERE R.[dateDebut] >= GETDATE() 
    AND A.[dateAnnulation] IS NULL
    AND R.[idClient] = @id_client
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cb88dd29-2c1e-4ff0-9f6e-ef3d499f590e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cb88dd29-2c1e-4ff0-9f6e-ef3d499f590e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9efb0d81-1af7-418c-b45d-a1eca745704a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9efb0d81-1af7-418c-b45d-a1eca745704a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fd2f6f1a-888d-4f7d-b47b-091245c33aba')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fd2f6f1a-888d-4f7d-b47b-091245c33aba')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9c5e8173-dfd5-4b8e-8f0e-89166951faa0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9c5e8173-dfd5-4b8e-8f0e-89166951faa0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f11c785d-750b-400c-b9cd-451844a51e65')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f11c785d-750b-400c-b9cd-451844a51e65')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cac09d5b-f6f8-4c31-aac4-51214d3ba12b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cac09d5b-f6f8-4c31-aac4-51214d3ba12b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '397a0fca-b7e8-4fb0-9e8e-14d4af62fe2d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('397a0fca-b7e8-4fb0-9e8e-14d4af62fe2d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8192e086-73f9-40d0-8059-a8964a5e0605')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8192e086-73f9-40d0-8059-a8964a5e0605')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b915ce2d-f819-4080-8f81-9e2900ee35f8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b915ce2d-f819-4080-8f81-9e2900ee35f8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c6b79e88-ad32-4a81-aa74-8150d255e001')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c6b79e88-ad32-4a81-aa74-8150d255e001')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7fd67f6b-1439-45f3-ade8-cf00c4cf0cfa')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7fd67f6b-1439-45f3-ade8-cf00c4cf0cfa')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '99cfcd29-68f0-4e78-8165-33d0b40d162d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('99cfcd29-68f0-4e78-8165-33d0b40d162d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '085871ba-3192-4cab-a8dd-8e20a98fc45b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('085871ba-3192-4cab-a8dd-8e20a98fc45b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e9bae8a2-503d-4eac-8787-2c062c957480')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e9bae8a2-503d-4eac-8787-2c062c957480')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '103cf4b9-70f5-47d9-98bb-446c0c7c9bd8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('103cf4b9-70f5-47d9-98bb-446c0c7c9bd8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5c2ce4dc-3987-42f6-a979-2b0db59adfee')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5c2ce4dc-3987-42f6-a979-2b0db59adfee')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b27e8271-d506-47f2-bb4f-5bdec53ac6a9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b27e8271-d506-47f2-bb4f-5bdec53ac6a9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '782b1618-9a20-4223-8c19-1e62b1abb438')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('782b1618-9a20-4223-8c19-1e62b1abb438')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
